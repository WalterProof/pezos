<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bzzhh\Pezos\Generated\Mempool\Normalizer;

use Bzzhh\Pezos\Generated\Mempool\Runtime\Normalizer\CheckArray;
use Bzzhh\Pezos\Generated\Mempool\Runtime\Normalizer\ValidatorTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class JaneObjectNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;
    protected $normalizers = ['Bzzhh\\Pezos\\Generated\\Mempool\\Model\\_016PtMumbaiBlockHeaderAlphaFullHeader' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\_016PtMumbaiBlockHeaderAlphaFullHeaderNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\_016PtMumbaiInlinedEndorsement' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\_016PtMumbaiInlinedEndorsementNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\_016PtMumbaiInlinedEndorsementMempoolContents' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\_016PtMumbaiInlinedEndorsementMempoolContentsNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\_016PtMumbaiInlinedPreendorsement' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\_016PtMumbaiInlinedPreendorsementNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\_016PtMumbaiInlinedPreendorsementContents' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\_016PtMumbaiInlinedPreendorsementContentsNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\_016PtMumbaiScriptedContracts' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\_016PtMumbaiScriptedContractsNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\NextOperation' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\NextOperationNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\MonitorOperationsGetResponse200Item' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\MonitorOperationsGetResponse200ItemNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\RequestOperationsPostBody' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\RequestOperationsPostBodyNormalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\RequestOperationsPostResponse200' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\RequestOperationsPostResponse200Normalizer', 'Bzzhh\\Pezos\\Generated\\Mempool\\Model\\UnbanAllOperationsPostBody' => 'Bzzhh\\Pezos\\Generated\\Mempool\\Normalizer\\UnbanAllOperationsPostBodyNormalizer', '\\Jane\\Component\\JsonSchemaRuntime\\Reference' => '\\Bzzhh\\Pezos\\Generated\\Mempool\\Runtime\\Normalizer\\ReferenceNormalizer'];
    protected $normalizersCache = [];

    public function supportsDenormalization($data, $type, $format = null, array $context = []): bool
    {
        return array_key_exists($type, $this->normalizers);
    }

    public function supportsNormalization($data, $format = null, array $context = []): bool
    {
        return is_object($data) && array_key_exists(get_class($data), $this->normalizers);
    }

    /**
     * @return array|string|int|float|bool|\ArrayObject|null
     */
    public function normalize($object, $format = null, array $context = [])
    {
        $normalizerClass = $this->normalizers[get_class($object)];
        $normalizer = $this->getNormalizer($normalizerClass);

        return $normalizer->normalize($object, $format, $context);
    }

    public function denormalize($data, $class, $format = null, array $context = [])
    {
        $denormalizerClass = $this->normalizers[$class];
        $denormalizer = $this->getNormalizer($denormalizerClass);

        return $denormalizer->denormalize($data, $class, $format, $context);
    }

    private function getNormalizer(string $normalizerClass)
    {
        return $this->normalizersCache[$normalizerClass] ?? $this->initNormalizer($normalizerClass);
    }

    private function initNormalizer(string $normalizerClass)
    {
        $normalizer = new $normalizerClass();
        $normalizer->setNormalizer($this->normalizer);
        $normalizer->setDenormalizer($this->denormalizer);
        $this->normalizersCache[$normalizerClass] = $normalizer;

        return $normalizer;
    }
}
