<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Shell\Model;

class ConfigGetResponse200P2pGreylistingConfig extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * The factor by which the reconnection delay is increased when a peer that was previously disconnected is disconnected again. This value should be set to 1 for a linear back-off and to >1 for an exponential back-off.
     *
     * @var float
     */
    protected $factor;
    /**
     * The span of time a peer is disconnected for when it is first disconnected.
     */
    protected $initialDelay;
    /**
     * The span of time a peer is disconnected for when it is disconnected as the result of an error.
     */
    protected $disconnectionDelay;
    /**
     * The maximum amount by which the reconnection is extended. This limits the rate of the exponential back-off, which eventually becomes linear when it reaches this limit. This limit is set to avoid reaching the End-of-Time when repeatedly reconnection a peer.
     */
    protected $increaseCap;

    /**
     * The factor by which the reconnection delay is increased when a peer that was previously disconnected is disconnected again. This value should be set to 1 for a linear back-off and to >1 for an exponential back-off.
     */
    public function getFactor(): float
    {
        return $this->factor;
    }

    /**
     * The factor by which the reconnection delay is increased when a peer that was previously disconnected is disconnected again. This value should be set to 1 for a linear back-off and to >1 for an exponential back-off.
     */
    public function setFactor(float $factor): self
    {
        $this->initialized['factor'] = true;
        $this->factor = $factor;

        return $this;
    }

    /**
     * The span of time a peer is disconnected for when it is first disconnected.
     */
    public function getInitialDelay()
    {
        return $this->initialDelay;
    }

    /**
     * The span of time a peer is disconnected for when it is first disconnected.
     */
    public function setInitialDelay($initialDelay): self
    {
        $this->initialized['initialDelay'] = true;
        $this->initialDelay = $initialDelay;

        return $this;
    }

    /**
     * The span of time a peer is disconnected for when it is disconnected as the result of an error.
     */
    public function getDisconnectionDelay()
    {
        return $this->disconnectionDelay;
    }

    /**
     * The span of time a peer is disconnected for when it is disconnected as the result of an error.
     */
    public function setDisconnectionDelay($disconnectionDelay): self
    {
        $this->initialized['disconnectionDelay'] = true;
        $this->disconnectionDelay = $disconnectionDelay;

        return $this;
    }

    /**
     * The maximum amount by which the reconnection is extended. This limits the rate of the exponential back-off, which eventually becomes linear when it reaches this limit. This limit is set to avoid reaching the End-of-Time when repeatedly reconnection a peer.
     */
    public function getIncreaseCap()
    {
        return $this->increaseCap;
    }

    /**
     * The maximum amount by which the reconnection is extended. This limits the rate of the exponential back-off, which eventually becomes linear when it reaches this limit. This limit is set to avoid reaching the End-of-Time when repeatedly reconnection a peer.
     */
    public function setIncreaseCap($increaseCap): self
    {
        $this->initialized['increaseCap'] = true;
        $this->increaseCap = $increaseCap;

        return $this;
    }
}
