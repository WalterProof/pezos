<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bzzhh\Pezos\Generated\Shell\Model;

class ConfigGetResponse200ShellPeerValidator extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * A span of time, as seen by the local computer.
     *
     * @var float
     */
    protected $blockHeaderRequestTimeout;
    /**
     * A span of time, as seen by the local computer.
     *
     * @var float
     */
    protected $blockOperationsRequestTimeout;
    /**
     * A span of time, as seen by the local computer.
     *
     * @var float
     */
    protected $protocolRequestTimeout;
    /**
     * A span of time, as seen by the local computer.
     *
     * @var float
     */
    protected $newHeadRequestTimeout;

    /**
     * A span of time, as seen by the local computer.
     */
    public function getBlockHeaderRequestTimeout(): float
    {
        return $this->blockHeaderRequestTimeout;
    }

    /**
     * A span of time, as seen by the local computer.
     */
    public function setBlockHeaderRequestTimeout(float $blockHeaderRequestTimeout): self
    {
        $this->initialized['blockHeaderRequestTimeout'] = true;
        $this->blockHeaderRequestTimeout = $blockHeaderRequestTimeout;

        return $this;
    }

    /**
     * A span of time, as seen by the local computer.
     */
    public function getBlockOperationsRequestTimeout(): float
    {
        return $this->blockOperationsRequestTimeout;
    }

    /**
     * A span of time, as seen by the local computer.
     */
    public function setBlockOperationsRequestTimeout(float $blockOperationsRequestTimeout): self
    {
        $this->initialized['blockOperationsRequestTimeout'] = true;
        $this->blockOperationsRequestTimeout = $blockOperationsRequestTimeout;

        return $this;
    }

    /**
     * A span of time, as seen by the local computer.
     */
    public function getProtocolRequestTimeout(): float
    {
        return $this->protocolRequestTimeout;
    }

    /**
     * A span of time, as seen by the local computer.
     */
    public function setProtocolRequestTimeout(float $protocolRequestTimeout): self
    {
        $this->initialized['protocolRequestTimeout'] = true;
        $this->protocolRequestTimeout = $protocolRequestTimeout;

        return $this;
    }

    /**
     * A span of time, as seen by the local computer.
     */
    public function getNewHeadRequestTimeout(): float
    {
        return $this->newHeadRequestTimeout;
    }

    /**
     * A span of time, as seen by the local computer.
     */
    public function setNewHeadRequestTimeout(float $newHeadRequestTimeout): self
    {
        $this->initialized['newHeadRequestTimeout'] = true;
        $this->newHeadRequestTimeout = $newHeadRequestTimeout;

        return $this;
    }
}
