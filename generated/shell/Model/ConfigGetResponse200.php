<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bzzhh\Pezos\Generated\Shell\Model;

class ConfigGetResponse200 extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Location of the data dir on disk.
     */
    protected $dataDir;
    /**
     * Disable the node configuration validation.
     *
     * @var bool
     */
    protected $disableConfigValidation;
    /**
     * Configuration of rpc parameters.
     *
     * @var ConfigGetResponse200Rpc
     */
    protected $rpc;
    /**
     * Configuration of network parameters.
     *
     * @var ConfigGetResponse200P2p
     */
    protected $p2p;
    /**
     * Configuration of the Lwt-log sink (part of the logging framework).
     *
     * @var ConfigGetResponse200Log
     */
    protected $log;
    /**
     * Configuration of the structured logging framework.
     */
    protected $internalEvents;
    /**
     * Configuration of network parameters.
     *
     * @var ConfigGetResponse200Shell
     */
    protected $shell;
    /**
     * Configuration of which network/blockchain to connect to.
     */
    protected $network;
    /**
     * Configuration of the Prometheus metrics endpoint.
     *
     * @var mixed[]
     */
    protected $metricsAddr;
    /**
     * USE FOR TESTING PURPOSE ONLY. Configuration for the data-availibility layer.
     *
     * @var ConfigGetResponse200Dal
     */
    protected $dal;

    /**
     * Location of the data dir on disk.
     */
    public function getDataDir()
    {
        return $this->dataDir;
    }

    /**
     * Location of the data dir on disk.
     */
    public function setDataDir($dataDir): self
    {
        $this->initialized['dataDir'] = true;
        $this->dataDir = $dataDir;

        return $this;
    }

    /**
     * Disable the node configuration validation.
     */
    public function getDisableConfigValidation(): bool
    {
        return $this->disableConfigValidation;
    }

    /**
     * Disable the node configuration validation.
     */
    public function setDisableConfigValidation(bool $disableConfigValidation): self
    {
        $this->initialized['disableConfigValidation'] = true;
        $this->disableConfigValidation = $disableConfigValidation;

        return $this;
    }

    /**
     * Configuration of rpc parameters.
     */
    public function getRpc(): ConfigGetResponse200Rpc
    {
        return $this->rpc;
    }

    /**
     * Configuration of rpc parameters.
     */
    public function setRpc(ConfigGetResponse200Rpc $rpc): self
    {
        $this->initialized['rpc'] = true;
        $this->rpc = $rpc;

        return $this;
    }

    /**
     * Configuration of network parameters.
     */
    public function getP2p(): ConfigGetResponse200P2p
    {
        return $this->p2p;
    }

    /**
     * Configuration of network parameters.
     */
    public function setP2p(ConfigGetResponse200P2p $p2p): self
    {
        $this->initialized['p2p'] = true;
        $this->p2p = $p2p;

        return $this;
    }

    /**
     * Configuration of the Lwt-log sink (part of the logging framework).
     */
    public function getLog(): ConfigGetResponse200Log
    {
        return $this->log;
    }

    /**
     * Configuration of the Lwt-log sink (part of the logging framework).
     */
    public function setLog(ConfigGetResponse200Log $log): self
    {
        $this->initialized['log'] = true;
        $this->log = $log;

        return $this;
    }

    /**
     * Configuration of the structured logging framework.
     */
    public function getInternalEvents()
    {
        return $this->internalEvents;
    }

    /**
     * Configuration of the structured logging framework.
     */
    public function setInternalEvents($internalEvents): self
    {
        $this->initialized['internalEvents'] = true;
        $this->internalEvents = $internalEvents;

        return $this;
    }

    /**
     * Configuration of network parameters.
     */
    public function getShell(): ConfigGetResponse200Shell
    {
        return $this->shell;
    }

    /**
     * Configuration of network parameters.
     */
    public function setShell(ConfigGetResponse200Shell $shell): self
    {
        $this->initialized['shell'] = true;
        $this->shell = $shell;

        return $this;
    }

    /**
     * Configuration of which network/blockchain to connect to.
     */
    public function getNetwork()
    {
        return $this->network;
    }

    /**
     * Configuration of which network/blockchain to connect to.
     */
    public function setNetwork($network): self
    {
        $this->initialized['network'] = true;
        $this->network = $network;

        return $this;
    }

    /**
     * Configuration of the Prometheus metrics endpoint.
     *
     * @return mixed[]
     */
    public function getMetricsAddr(): array
    {
        return $this->metricsAddr;
    }

    /**
     * Configuration of the Prometheus metrics endpoint.
     *
     * @param mixed[] $metricsAddr
     */
    public function setMetricsAddr(array $metricsAddr): self
    {
        $this->initialized['metricsAddr'] = true;
        $this->metricsAddr = $metricsAddr;

        return $this;
    }

    /**
     * USE FOR TESTING PURPOSE ONLY. Configuration for the data-availibility layer.
     */
    public function getDal(): ConfigGetResponse200Dal
    {
        return $this->dal;
    }

    /**
     * USE FOR TESTING PURPOSE ONLY. Configuration for the data-availibility layer.
     */
    public function setDal(ConfigGetResponse200Dal $dal): self
    {
        $this->initialized['dal'] = true;
        $this->dal = $dal;

        return $this;
    }
}
