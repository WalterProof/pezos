<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bzzhh\Pezos\Generated\Shell\Model;

class NetworkPeersPeerIdPatchResponse200 extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var float
     */
    protected $score;
    /**
     * @var bool
     */
    protected $trusted;
    /**
     * @var NetworkPeersPeerIdPatchResponse200ConnMetadata
     */
    protected $connMetadata;
    /**
     * @var NetworkPeersPeerIdPatchResponse200PeerMetadata
     */
    protected $peerMetadata;
    /**
     * The state a peer connection can be in: accepted (when the connection is being established), running (when the connection is already established), disconnected (otherwise).
     *
     * @var string
     */
    protected $state;
    /**
     * The identifier for a p2p connection. It includes an address and a port number.
     *
     * @var P2pConnectionId
     */
    protected $reachableAt;
    /**
     * Statistics about the p2p network.
     *
     * @var P2pStat
     */
    protected $stat;
    /**
     * @var mixed[]
     */
    protected $lastFailedConnection;
    /**
     * @var mixed[]
     */
    protected $lastRejectedConnection;
    /**
     * @var mixed[]
     */
    protected $lastEstablishedConnection;
    /**
     * @var mixed[]
     */
    protected $lastDisconnection;
    /**
     * @var mixed[]
     */
    protected $lastSeen;
    /**
     * @var mixed[]
     */
    protected $lastMiss;

    public function getScore(): float
    {
        return $this->score;
    }

    public function setScore(float $score): self
    {
        $this->initialized['score'] = true;
        $this->score = $score;

        return $this;
    }

    public function getTrusted(): bool
    {
        return $this->trusted;
    }

    public function setTrusted(bool $trusted): self
    {
        $this->initialized['trusted'] = true;
        $this->trusted = $trusted;

        return $this;
    }

    public function getConnMetadata(): NetworkPeersPeerIdPatchResponse200ConnMetadata
    {
        return $this->connMetadata;
    }

    public function setConnMetadata(NetworkPeersPeerIdPatchResponse200ConnMetadata $connMetadata): self
    {
        $this->initialized['connMetadata'] = true;
        $this->connMetadata = $connMetadata;

        return $this;
    }

    public function getPeerMetadata(): NetworkPeersPeerIdPatchResponse200PeerMetadata
    {
        return $this->peerMetadata;
    }

    public function setPeerMetadata(NetworkPeersPeerIdPatchResponse200PeerMetadata $peerMetadata): self
    {
        $this->initialized['peerMetadata'] = true;
        $this->peerMetadata = $peerMetadata;

        return $this;
    }

    /**
     * The state a peer connection can be in: accepted (when the connection is being established), running (when the connection is already established), disconnected (otherwise).
     */
    public function getState(): string
    {
        return $this->state;
    }

    /**
     * The state a peer connection can be in: accepted (when the connection is being established), running (when the connection is already established), disconnected (otherwise).
     */
    public function setState(string $state): self
    {
        $this->initialized['state'] = true;
        $this->state = $state;

        return $this;
    }

    /**
     * The identifier for a p2p connection. It includes an address and a port number.
     */
    public function getReachableAt(): P2pConnectionId
    {
        return $this->reachableAt;
    }

    /**
     * The identifier for a p2p connection. It includes an address and a port number.
     */
    public function setReachableAt(P2pConnectionId $reachableAt): self
    {
        $this->initialized['reachableAt'] = true;
        $this->reachableAt = $reachableAt;

        return $this;
    }

    /**
     * Statistics about the p2p network.
     */
    public function getStat(): P2pStat
    {
        return $this->stat;
    }

    /**
     * Statistics about the p2p network.
     */
    public function setStat(P2pStat $stat): self
    {
        $this->initialized['stat'] = true;
        $this->stat = $stat;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getLastFailedConnection(): array
    {
        return $this->lastFailedConnection;
    }

    /**
     * @param mixed[] $lastFailedConnection
     */
    public function setLastFailedConnection(array $lastFailedConnection): self
    {
        $this->initialized['lastFailedConnection'] = true;
        $this->lastFailedConnection = $lastFailedConnection;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getLastRejectedConnection(): array
    {
        return $this->lastRejectedConnection;
    }

    /**
     * @param mixed[] $lastRejectedConnection
     */
    public function setLastRejectedConnection(array $lastRejectedConnection): self
    {
        $this->initialized['lastRejectedConnection'] = true;
        $this->lastRejectedConnection = $lastRejectedConnection;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getLastEstablishedConnection(): array
    {
        return $this->lastEstablishedConnection;
    }

    /**
     * @param mixed[] $lastEstablishedConnection
     */
    public function setLastEstablishedConnection(array $lastEstablishedConnection): self
    {
        $this->initialized['lastEstablishedConnection'] = true;
        $this->lastEstablishedConnection = $lastEstablishedConnection;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getLastDisconnection(): array
    {
        return $this->lastDisconnection;
    }

    /**
     * @param mixed[] $lastDisconnection
     */
    public function setLastDisconnection(array $lastDisconnection): self
    {
        $this->initialized['lastDisconnection'] = true;
        $this->lastDisconnection = $lastDisconnection;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getLastSeen(): array
    {
        return $this->lastSeen;
    }

    /**
     * @param mixed[] $lastSeen
     */
    public function setLastSeen(array $lastSeen): self
    {
        $this->initialized['lastSeen'] = true;
        $this->lastSeen = $lastSeen;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getLastMiss(): array
    {
        return $this->lastMiss;
    }

    /**
     * @param mixed[] $lastMiss
     */
    public function setLastMiss(array $lastMiss): self
    {
        $this->initialized['lastMiss'] = true;
        $this->lastMiss = $lastMiss;

        return $this;
    }
}
