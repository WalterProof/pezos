<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Rpc\Model;

class ConfigGetResponse200Log extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Output for the logging function. Either 'stdout', 'stderr' or the name of a log file .
     */
    protected $output;
    /**
     * Verbosity level: one of 'fatal', 'error', 'warn','notice', 'info', 'debug'.
     *
     * @var string
     */
    protected $level;
    /**
     * Enables light coloring in logs.
     *
     * @var bool
     */
    protected $colors;
    /**
     * Fine-grained logging instructions. Same format as described in `octez-node run --help`, DEBUG section. In the example below, sections 'p2p' and all sections starting by 'client' will have their messages logged up to the debug level, whereas the rest of log sections will be logged up to the notice level.
     */
    protected $rules;

    /**
     * Output for the logging function. Either 'stdout', 'stderr' or the name of a log file .
     */
    public function getOutput()
    {
        return $this->output;
    }

    /**
     * Output for the logging function. Either 'stdout', 'stderr' or the name of a log file .
     */
    public function setOutput($output): self
    {
        $this->initialized['output'] = true;
        $this->output = $output;

        return $this;
    }

    /**
     * Verbosity level: one of 'fatal', 'error', 'warn','notice', 'info', 'debug'.
     */
    public function getLevel(): string
    {
        return $this->level;
    }

    /**
     * Verbosity level: one of 'fatal', 'error', 'warn','notice', 'info', 'debug'.
     */
    public function setLevel(string $level): self
    {
        $this->initialized['level'] = true;
        $this->level = $level;

        return $this;
    }

    /**
     * Enables light coloring in logs.
     */
    public function getColors(): bool
    {
        return $this->colors;
    }

    /**
     * Enables light coloring in logs.
     */
    public function setColors(bool $colors): self
    {
        $this->initialized['colors'] = true;
        $this->colors = $colors;

        return $this;
    }

    /**
     * Fine-grained logging instructions. Same format as described in `octez-node run --help`, DEBUG section. In the example below, sections 'p2p' and all sections starting by 'client' will have their messages logged up to the debug level, whereas the rest of log sections will be logged up to the notice level.
     */
    public function getRules()
    {
        return $this->rules;
    }

    /**
     * Fine-grained logging instructions. Same format as described in `octez-node run --help`, DEBUG section. In the example below, sections 'p2p' and all sections starting by 'client' will have their messages logged up to the debug level, whereas the rest of log sections will be logged up to the notice level.
     */
    public function setRules($rules): self
    {
        $this->initialized['rules'] = true;
        $this->rules = $rules;

        return $this;
    }
}
