<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Rollup\Model;

class GlobalBlockBlockIdGetResponse200 extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Tezos block hash.
     */
    protected $blockHash;
    /**
     * Level of the block, corresponds to the level of the tezos block.
     *
     * @var int
     */
    protected $level;
    /**
     * Predecessor hash of the Tezos block.
     */
    protected $predecessor;
    /**
     * Hash of this block's commitment if any was computed for it.
     *
     * @var mixed|null
     */
    protected $commitmentHash;
    /**
     * Previous commitment hash in the chain. If there is a commitment for this block, this field contains the commitment that was previously computed.
     */
    protected $previousCommitmentHash;
    /**
     * Hash of the layer 2 context for this block.
     */
    protected $context;
    /**
     * Witness for the inbox for this block, i.e. the Merkle hash of payloads of messages.
     */
    protected $inboxWitness;
    /**
     * Hash of the inbox for this block.
     */
    protected $inboxHash;
    /**
     * Inbox for this block.
     *
     * @var GlobalBlockBlockIdGetResponse200Inbox
     */
    protected $inbox;
    /**
     * Messages added to the inbox in this block.
     *
     * @var list<string>
     */
    protected $messages;
    /**
     * Commitment, if any is computed for this block.
     *
     * @var GlobalBlockBlockIdGetResponse200Commitment
     */
    protected $commitment;
    /**
     * Outbox messages produced by PVM execution of inbox.
     *
     * @var list<mixed>
     */
    protected $outbox;
    /**
     * Initial tick of the PVM at this block, i.e. before evaluation of the messages.
     */
    protected $initialTick;
    /**
     * Number of ticks produced by the evaluation of the messages in this block.
     */
    protected $numTicks;

    /**
     * Tezos block hash.
     */
    public function getBlockHash()
    {
        return $this->blockHash;
    }

    /**
     * Tezos block hash.
     */
    public function setBlockHash($blockHash): self
    {
        $this->initialized['blockHash'] = true;
        $this->blockHash = $blockHash;

        return $this;
    }

    /**
     * Level of the block, corresponds to the level of the tezos block.
     */
    public function getLevel(): int
    {
        return $this->level;
    }

    /**
     * Level of the block, corresponds to the level of the tezos block.
     */
    public function setLevel(int $level): self
    {
        $this->initialized['level'] = true;
        $this->level = $level;

        return $this;
    }

    /**
     * Predecessor hash of the Tezos block.
     */
    public function getPredecessor()
    {
        return $this->predecessor;
    }

    /**
     * Predecessor hash of the Tezos block.
     */
    public function setPredecessor($predecessor): self
    {
        $this->initialized['predecessor'] = true;
        $this->predecessor = $predecessor;

        return $this;
    }

    /**
     * Hash of this block's commitment if any was computed for it.
     */
    public function getCommitmentHash()
    {
        return $this->commitmentHash;
    }

    /**
     * Hash of this block's commitment if any was computed for it.
     */
    public function setCommitmentHash($commitmentHash): self
    {
        $this->initialized['commitmentHash'] = true;
        $this->commitmentHash = $commitmentHash;

        return $this;
    }

    /**
     * Previous commitment hash in the chain. If there is a commitment for this block, this field contains the commitment that was previously computed.
     */
    public function getPreviousCommitmentHash()
    {
        return $this->previousCommitmentHash;
    }

    /**
     * Previous commitment hash in the chain. If there is a commitment for this block, this field contains the commitment that was previously computed.
     */
    public function setPreviousCommitmentHash($previousCommitmentHash): self
    {
        $this->initialized['previousCommitmentHash'] = true;
        $this->previousCommitmentHash = $previousCommitmentHash;

        return $this;
    }

    /**
     * Hash of the layer 2 context for this block.
     */
    public function getContext()
    {
        return $this->context;
    }

    /**
     * Hash of the layer 2 context for this block.
     */
    public function setContext($context): self
    {
        $this->initialized['context'] = true;
        $this->context = $context;

        return $this;
    }

    /**
     * Witness for the inbox for this block, i.e. the Merkle hash of payloads of messages.
     */
    public function getInboxWitness()
    {
        return $this->inboxWitness;
    }

    /**
     * Witness for the inbox for this block, i.e. the Merkle hash of payloads of messages.
     */
    public function setInboxWitness($inboxWitness): self
    {
        $this->initialized['inboxWitness'] = true;
        $this->inboxWitness = $inboxWitness;

        return $this;
    }

    /**
     * Hash of the inbox for this block.
     */
    public function getInboxHash()
    {
        return $this->inboxHash;
    }

    /**
     * Hash of the inbox for this block.
     */
    public function setInboxHash($inboxHash): self
    {
        $this->initialized['inboxHash'] = true;
        $this->inboxHash = $inboxHash;

        return $this;
    }

    /**
     * Inbox for this block.
     */
    public function getInbox(): GlobalBlockBlockIdGetResponse200Inbox
    {
        return $this->inbox;
    }

    /**
     * Inbox for this block.
     */
    public function setInbox(GlobalBlockBlockIdGetResponse200Inbox $inbox): self
    {
        $this->initialized['inbox'] = true;
        $this->inbox = $inbox;

        return $this;
    }

    /**
     * Messages added to the inbox in this block.
     *
     * @return list<string>
     */
    public function getMessages(): array
    {
        return $this->messages;
    }

    /**
     * Messages added to the inbox in this block.
     *
     * @param list<string> $messages
     */
    public function setMessages(array $messages): self
    {
        $this->initialized['messages'] = true;
        $this->messages = $messages;

        return $this;
    }

    /**
     * Commitment, if any is computed for this block.
     */
    public function getCommitment(): GlobalBlockBlockIdGetResponse200Commitment
    {
        return $this->commitment;
    }

    /**
     * Commitment, if any is computed for this block.
     */
    public function setCommitment(GlobalBlockBlockIdGetResponse200Commitment $commitment): self
    {
        $this->initialized['commitment'] = true;
        $this->commitment = $commitment;

        return $this;
    }

    /**
     * Outbox messages produced by PVM execution of inbox.
     *
     * @return list<mixed>
     */
    public function getOutbox(): array
    {
        return $this->outbox;
    }

    /**
     * Outbox messages produced by PVM execution of inbox.
     *
     * @param list<mixed> $outbox
     */
    public function setOutbox(array $outbox): self
    {
        $this->initialized['outbox'] = true;
        $this->outbox = $outbox;

        return $this;
    }

    /**
     * Initial tick of the PVM at this block, i.e. before evaluation of the messages.
     */
    public function getInitialTick()
    {
        return $this->initialTick;
    }

    /**
     * Initial tick of the PVM at this block, i.e. before evaluation of the messages.
     */
    public function setInitialTick($initialTick): self
    {
        $this->initialized['initialTick'] = true;
        $this->initialTick = $initialTick;

        return $this;
    }

    /**
     * Number of ticks produced by the evaluation of the messages in this block.
     */
    public function getNumTicks()
    {
        return $this->numTicks;
    }

    /**
     * Number of ticks produced by the evaluation of the messages in this block.
     */
    public function setNumTicks($numTicks): self
    {
        $this->initialized['numTicks'] = true;
        $this->numTicks = $numTicks;

        return $this;
    }
}
