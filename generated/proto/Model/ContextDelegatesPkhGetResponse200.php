<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bzzhh\Pezos\Generated\Proto\Model;

class ContextDelegatesPkhGetResponse200 extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $fullBalance;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $currentFrozenDeposits;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $frozenDeposits;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $stakingBalance;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $frozenDepositsLimit;
    /**
     * @var mixed[]
     */
    protected $delegatedContracts;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $delegatedBalance;
    /**
     * @var bool
     */
    protected $deactivated;
    /**
     * @var int
     */
    protected $gracePeriod;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $votingPower;
    /**
     * @var string
     */
    protected $currentBallot;
    /**
     * @var mixed[]
     */
    protected $currentProposals;
    /**
     * @var int
     */
    protected $remainingProposals;

    protected $activeConsensusKey;
    /**
     * @var ContextDelegatesPkhGetResponse200PendingConsensusKeysItem[]
     */
    protected $pendingConsensusKeys;

    /**
     * Decimal representation of a positive big number.
     */
    public function getFullBalance(): string
    {
        return $this->fullBalance;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setFullBalance(string $fullBalance): self
    {
        $this->initialized['fullBalance'] = true;
        $this->fullBalance = $fullBalance;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getCurrentFrozenDeposits(): string
    {
        return $this->currentFrozenDeposits;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setCurrentFrozenDeposits(string $currentFrozenDeposits): self
    {
        $this->initialized['currentFrozenDeposits'] = true;
        $this->currentFrozenDeposits = $currentFrozenDeposits;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getFrozenDeposits(): string
    {
        return $this->frozenDeposits;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setFrozenDeposits(string $frozenDeposits): self
    {
        $this->initialized['frozenDeposits'] = true;
        $this->frozenDeposits = $frozenDeposits;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getStakingBalance(): string
    {
        return $this->stakingBalance;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setStakingBalance(string $stakingBalance): self
    {
        $this->initialized['stakingBalance'] = true;
        $this->stakingBalance = $stakingBalance;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getFrozenDepositsLimit(): string
    {
        return $this->frozenDepositsLimit;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setFrozenDepositsLimit(string $frozenDepositsLimit): self
    {
        $this->initialized['frozenDepositsLimit'] = true;
        $this->frozenDepositsLimit = $frozenDepositsLimit;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getDelegatedContracts(): array
    {
        return $this->delegatedContracts;
    }

    /**
     * @param mixed[] $delegatedContracts
     */
    public function setDelegatedContracts(array $delegatedContracts): self
    {
        $this->initialized['delegatedContracts'] = true;
        $this->delegatedContracts = $delegatedContracts;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getDelegatedBalance(): string
    {
        return $this->delegatedBalance;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setDelegatedBalance(string $delegatedBalance): self
    {
        $this->initialized['delegatedBalance'] = true;
        $this->delegatedBalance = $delegatedBalance;

        return $this;
    }

    public function getDeactivated(): bool
    {
        return $this->deactivated;
    }

    public function setDeactivated(bool $deactivated): self
    {
        $this->initialized['deactivated'] = true;
        $this->deactivated = $deactivated;

        return $this;
    }

    public function getGracePeriod(): int
    {
        return $this->gracePeriod;
    }

    public function setGracePeriod(int $gracePeriod): self
    {
        $this->initialized['gracePeriod'] = true;
        $this->gracePeriod = $gracePeriod;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getVotingPower(): string
    {
        return $this->votingPower;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setVotingPower(string $votingPower): self
    {
        $this->initialized['votingPower'] = true;
        $this->votingPower = $votingPower;

        return $this;
    }

    public function getCurrentBallot(): string
    {
        return $this->currentBallot;
    }

    public function setCurrentBallot(string $currentBallot): self
    {
        $this->initialized['currentBallot'] = true;
        $this->currentBallot = $currentBallot;

        return $this;
    }

    /**
     * @return mixed[]
     */
    public function getCurrentProposals(): array
    {
        return $this->currentProposals;
    }

    /**
     * @param mixed[] $currentProposals
     */
    public function setCurrentProposals(array $currentProposals): self
    {
        $this->initialized['currentProposals'] = true;
        $this->currentProposals = $currentProposals;

        return $this;
    }

    public function getRemainingProposals(): int
    {
        return $this->remainingProposals;
    }

    public function setRemainingProposals(int $remainingProposals): self
    {
        $this->initialized['remainingProposals'] = true;
        $this->remainingProposals = $remainingProposals;

        return $this;
    }

    public function getActiveConsensusKey()
    {
        return $this->activeConsensusKey;
    }

    public function setActiveConsensusKey($activeConsensusKey): self
    {
        $this->initialized['activeConsensusKey'] = true;
        $this->activeConsensusKey = $activeConsensusKey;

        return $this;
    }

    /**
     * @return ContextDelegatesPkhGetResponse200PendingConsensusKeysItem[]
     */
    public function getPendingConsensusKeys(): array
    {
        return $this->pendingConsensusKeys;
    }

    /**
     * @param ContextDelegatesPkhGetResponse200PendingConsensusKeysItem[] $pendingConsensusKeys
     */
    public function setPendingConsensusKeys(array $pendingConsensusKeys): self
    {
        $this->initialized['pendingConsensusKeys'] = true;
        $this->pendingConsensusKeys = $pendingConsensusKeys;

        return $this;
    }
}
