<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Proto\Model;

class ContextDelegatesPkhGetResponse200 extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var bool
     */
    protected $deactivated;
    /**
     * @var bool
     */
    protected $isForbidden;
    /**
     * @var ContextDelegatesPkhGetResponse200Participation
     */
    protected $participation;
    /**
     * @var int
     */
    protected $gracePeriod;
    /**
     * @var ContextDelegatesPkhGetResponse200ActiveStakingParameters
     */
    protected $activeStakingParameters;
    /**
     * @var list<ContextDelegatesPkhGetResponse200PendingStakingParametersItem>
     */
    protected $pendingStakingParameters;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $bakingPower;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $totalStaked;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $totalDelegated;
    /**
     * @var ContextDelegatesPkhGetResponse200MinDelegatedInCurrentCycle
     */
    protected $minDelegatedInCurrentCycle;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $ownFullBalance;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $ownStaked;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $ownDelegated;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $externalStaked;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $externalDelegated;
    /**
     * @var list<ContextDelegatesPkhGetResponse200TotalUnstakedPerCycleItem>
     */
    protected $totalUnstakedPerCycle;
    /**
     * @var list<ContextDelegatesPkhGetResponse200DenunciationsItem>
     */
    protected $denunciations;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $estimatedSharedPendingSlashedAmount;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $stakingDenominator;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $currentVotingPower;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $votingPower;
    /**
     * @var ContextDelegatesPkhGetResponse200VotingInfo
     */
    protected $votingInfo;
    /**
     * @var ContextDelegatesPkhGetResponse200ConsensusKey
     */
    protected $consensusKey;
    /**
     * @var list<ContextDelegatesPkhGetResponse200StakersItem>
     */
    protected $stakers;
    /**
     * @var list<mixed>
     */
    protected $delegators;

    public function getDeactivated(): bool
    {
        return $this->deactivated;
    }

    public function setDeactivated(bool $deactivated): self
    {
        $this->initialized['deactivated'] = true;
        $this->deactivated = $deactivated;

        return $this;
    }

    public function getIsForbidden(): bool
    {
        return $this->isForbidden;
    }

    public function setIsForbidden(bool $isForbidden): self
    {
        $this->initialized['isForbidden'] = true;
        $this->isForbidden = $isForbidden;

        return $this;
    }

    public function getParticipation(): ContextDelegatesPkhGetResponse200Participation
    {
        return $this->participation;
    }

    public function setParticipation(ContextDelegatesPkhGetResponse200Participation $participation): self
    {
        $this->initialized['participation'] = true;
        $this->participation = $participation;

        return $this;
    }

    public function getGracePeriod(): int
    {
        return $this->gracePeriod;
    }

    public function setGracePeriod(int $gracePeriod): self
    {
        $this->initialized['gracePeriod'] = true;
        $this->gracePeriod = $gracePeriod;

        return $this;
    }

    public function getActiveStakingParameters(): ContextDelegatesPkhGetResponse200ActiveStakingParameters
    {
        return $this->activeStakingParameters;
    }

    public function setActiveStakingParameters(ContextDelegatesPkhGetResponse200ActiveStakingParameters $activeStakingParameters): self
    {
        $this->initialized['activeStakingParameters'] = true;
        $this->activeStakingParameters = $activeStakingParameters;

        return $this;
    }

    /**
     * @return list<ContextDelegatesPkhGetResponse200PendingStakingParametersItem>
     */
    public function getPendingStakingParameters(): array
    {
        return $this->pendingStakingParameters;
    }

    /**
     * @param list<ContextDelegatesPkhGetResponse200PendingStakingParametersItem> $pendingStakingParameters
     */
    public function setPendingStakingParameters(array $pendingStakingParameters): self
    {
        $this->initialized['pendingStakingParameters'] = true;
        $this->pendingStakingParameters = $pendingStakingParameters;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getBakingPower(): string
    {
        return $this->bakingPower;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setBakingPower(string $bakingPower): self
    {
        $this->initialized['bakingPower'] = true;
        $this->bakingPower = $bakingPower;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getTotalStaked(): string
    {
        return $this->totalStaked;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setTotalStaked(string $totalStaked): self
    {
        $this->initialized['totalStaked'] = true;
        $this->totalStaked = $totalStaked;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getTotalDelegated(): string
    {
        return $this->totalDelegated;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setTotalDelegated(string $totalDelegated): self
    {
        $this->initialized['totalDelegated'] = true;
        $this->totalDelegated = $totalDelegated;

        return $this;
    }

    public function getMinDelegatedInCurrentCycle(): ContextDelegatesPkhGetResponse200MinDelegatedInCurrentCycle
    {
        return $this->minDelegatedInCurrentCycle;
    }

    public function setMinDelegatedInCurrentCycle(ContextDelegatesPkhGetResponse200MinDelegatedInCurrentCycle $minDelegatedInCurrentCycle): self
    {
        $this->initialized['minDelegatedInCurrentCycle'] = true;
        $this->minDelegatedInCurrentCycle = $minDelegatedInCurrentCycle;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getOwnFullBalance(): string
    {
        return $this->ownFullBalance;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setOwnFullBalance(string $ownFullBalance): self
    {
        $this->initialized['ownFullBalance'] = true;
        $this->ownFullBalance = $ownFullBalance;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getOwnStaked(): string
    {
        return $this->ownStaked;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setOwnStaked(string $ownStaked): self
    {
        $this->initialized['ownStaked'] = true;
        $this->ownStaked = $ownStaked;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getOwnDelegated(): string
    {
        return $this->ownDelegated;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setOwnDelegated(string $ownDelegated): self
    {
        $this->initialized['ownDelegated'] = true;
        $this->ownDelegated = $ownDelegated;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getExternalStaked(): string
    {
        return $this->externalStaked;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setExternalStaked(string $externalStaked): self
    {
        $this->initialized['externalStaked'] = true;
        $this->externalStaked = $externalStaked;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getExternalDelegated(): string
    {
        return $this->externalDelegated;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setExternalDelegated(string $externalDelegated): self
    {
        $this->initialized['externalDelegated'] = true;
        $this->externalDelegated = $externalDelegated;

        return $this;
    }

    /**
     * @return list<ContextDelegatesPkhGetResponse200TotalUnstakedPerCycleItem>
     */
    public function getTotalUnstakedPerCycle(): array
    {
        return $this->totalUnstakedPerCycle;
    }

    /**
     * @param list<ContextDelegatesPkhGetResponse200TotalUnstakedPerCycleItem> $totalUnstakedPerCycle
     */
    public function setTotalUnstakedPerCycle(array $totalUnstakedPerCycle): self
    {
        $this->initialized['totalUnstakedPerCycle'] = true;
        $this->totalUnstakedPerCycle = $totalUnstakedPerCycle;

        return $this;
    }

    /**
     * @return list<ContextDelegatesPkhGetResponse200DenunciationsItem>
     */
    public function getDenunciations(): array
    {
        return $this->denunciations;
    }

    /**
     * @param list<ContextDelegatesPkhGetResponse200DenunciationsItem> $denunciations
     */
    public function setDenunciations(array $denunciations): self
    {
        $this->initialized['denunciations'] = true;
        $this->denunciations = $denunciations;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getEstimatedSharedPendingSlashedAmount(): string
    {
        return $this->estimatedSharedPendingSlashedAmount;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setEstimatedSharedPendingSlashedAmount(string $estimatedSharedPendingSlashedAmount): self
    {
        $this->initialized['estimatedSharedPendingSlashedAmount'] = true;
        $this->estimatedSharedPendingSlashedAmount = $estimatedSharedPendingSlashedAmount;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getStakingDenominator(): string
    {
        return $this->stakingDenominator;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setStakingDenominator(string $stakingDenominator): self
    {
        $this->initialized['stakingDenominator'] = true;
        $this->stakingDenominator = $stakingDenominator;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getCurrentVotingPower(): string
    {
        return $this->currentVotingPower;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setCurrentVotingPower(string $currentVotingPower): self
    {
        $this->initialized['currentVotingPower'] = true;
        $this->currentVotingPower = $currentVotingPower;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getVotingPower(): string
    {
        return $this->votingPower;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setVotingPower(string $votingPower): self
    {
        $this->initialized['votingPower'] = true;
        $this->votingPower = $votingPower;

        return $this;
    }

    public function getVotingInfo(): ContextDelegatesPkhGetResponse200VotingInfo
    {
        return $this->votingInfo;
    }

    public function setVotingInfo(ContextDelegatesPkhGetResponse200VotingInfo $votingInfo): self
    {
        $this->initialized['votingInfo'] = true;
        $this->votingInfo = $votingInfo;

        return $this;
    }

    public function getConsensusKey(): ContextDelegatesPkhGetResponse200ConsensusKey
    {
        return $this->consensusKey;
    }

    public function setConsensusKey(ContextDelegatesPkhGetResponse200ConsensusKey $consensusKey): self
    {
        $this->initialized['consensusKey'] = true;
        $this->consensusKey = $consensusKey;

        return $this;
    }

    /**
     * @return list<ContextDelegatesPkhGetResponse200StakersItem>
     */
    public function getStakers(): array
    {
        return $this->stakers;
    }

    /**
     * @param list<ContextDelegatesPkhGetResponse200StakersItem> $stakers
     */
    public function setStakers(array $stakers): self
    {
        $this->initialized['stakers'] = true;
        $this->stakers = $stakers;

        return $this;
    }

    /**
     * @return list<mixed>
     */
    public function getDelegators(): array
    {
        return $this->delegators;
    }

    /**
     * @param list<mixed> $delegators
     */
    public function setDelegators(array $delegators): self
    {
        $this->initialized['delegators'] = true;
        $this->delegators = $delegators;

        return $this;
    }
}
