<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bzzhh\Pezos\Generated\Proto\Model;

class ContextTxRollupTxRollupIdStateGetResponse200 extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var mixed|null
     */
    protected $lastRemovedCommitmentHashes;

    protected $finalizedCommitments;

    protected $unfinalizedCommitments;

    protected $uncommittedInboxes;
    /**
     * @var mixed|null
     */
    protected $commitmentNewestHash;
    /**
     * @var mixed|null
     */
    protected $tezosHeadLevel;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $burnPerByte;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $allocatedStorage;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $occupiedStorage;
    /**
     * @var int
     */
    protected $inboxEma;
    /**
     * @var mixed|null
     */
    protected $commitmentsWatermark;

    public function getLastRemovedCommitmentHashes()
    {
        return $this->lastRemovedCommitmentHashes;
    }

    public function setLastRemovedCommitmentHashes($lastRemovedCommitmentHashes): self
    {
        $this->initialized['lastRemovedCommitmentHashes'] = true;
        $this->lastRemovedCommitmentHashes = $lastRemovedCommitmentHashes;

        return $this;
    }

    public function getFinalizedCommitments()
    {
        return $this->finalizedCommitments;
    }

    public function setFinalizedCommitments($finalizedCommitments): self
    {
        $this->initialized['finalizedCommitments'] = true;
        $this->finalizedCommitments = $finalizedCommitments;

        return $this;
    }

    public function getUnfinalizedCommitments()
    {
        return $this->unfinalizedCommitments;
    }

    public function setUnfinalizedCommitments($unfinalizedCommitments): self
    {
        $this->initialized['unfinalizedCommitments'] = true;
        $this->unfinalizedCommitments = $unfinalizedCommitments;

        return $this;
    }

    public function getUncommittedInboxes()
    {
        return $this->uncommittedInboxes;
    }

    public function setUncommittedInboxes($uncommittedInboxes): self
    {
        $this->initialized['uncommittedInboxes'] = true;
        $this->uncommittedInboxes = $uncommittedInboxes;

        return $this;
    }

    public function getCommitmentNewestHash()
    {
        return $this->commitmentNewestHash;
    }

    public function setCommitmentNewestHash($commitmentNewestHash): self
    {
        $this->initialized['commitmentNewestHash'] = true;
        $this->commitmentNewestHash = $commitmentNewestHash;

        return $this;
    }

    public function getTezosHeadLevel()
    {
        return $this->tezosHeadLevel;
    }

    public function setTezosHeadLevel($tezosHeadLevel): self
    {
        $this->initialized['tezosHeadLevel'] = true;
        $this->tezosHeadLevel = $tezosHeadLevel;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getBurnPerByte(): string
    {
        return $this->burnPerByte;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setBurnPerByte(string $burnPerByte): self
    {
        $this->initialized['burnPerByte'] = true;
        $this->burnPerByte = $burnPerByte;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getAllocatedStorage(): string
    {
        return $this->allocatedStorage;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setAllocatedStorage(string $allocatedStorage): self
    {
        $this->initialized['allocatedStorage'] = true;
        $this->allocatedStorage = $allocatedStorage;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getOccupiedStorage(): string
    {
        return $this->occupiedStorage;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setOccupiedStorage(string $occupiedStorage): self
    {
        $this->initialized['occupiedStorage'] = true;
        $this->occupiedStorage = $occupiedStorage;

        return $this;
    }

    public function getInboxEma(): int
    {
        return $this->inboxEma;
    }

    public function setInboxEma(int $inboxEma): self
    {
        $this->initialized['inboxEma'] = true;
        $this->inboxEma = $inboxEma;

        return $this;
    }

    public function getCommitmentsWatermark()
    {
        return $this->commitmentsWatermark;
    }

    public function setCommitmentsWatermark($commitmentsWatermark): self
    {
        $this->initialized['commitmentsWatermark'] = true;
        $this->commitmentsWatermark = $commitmentsWatermark;

        return $this;
    }
}
