<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bzzhh\Pezos\Generated\Proto\Model;

class ContextConstantsGetResponse200
{
    /**
     * @var int
     */
    protected $proofOfWorkNonceSize;
    /**
     * @var int
     */
    protected $nonceLength;
    /**
     * @var int
     */
    protected $maxAnonOpsPerBlock;
    /**
     * @var int
     */
    protected $maxOperationDataLength;
    /**
     * @var int
     */
    protected $maxProposalsPerDelegate;
    /**
     * @var int
     */
    protected $preservedCycles;
    /**
     * @var int
     */
    protected $blocksPerCycle;
    /**
     * @var int
     */
    protected $blocksPerCommitment;
    /**
     * @var int
     */
    protected $blocksPerRollSnapshot;
    /**
     * @var int
     */
    protected $blocksPerVotingPeriod;
    /**
     * @var string[]
     */
    protected $timeBetweenBlocks;
    /**
     * @var int
     */
    protected $endorsersPerBlock;
    /**
     * Decimal representation of a big number.
     *
     * @var string
     */
    protected $hardGasLimitPerOperation;
    /**
     * Decimal representation of a big number.
     *
     * @var string
     */
    protected $hardGasLimitPerBlock;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $proofOfWorkThreshold;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $tokensPerRoll;
    /**
     * @var int
     */
    protected $michelsonMaximumTypeSize;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $seedNonceRevelationTip;
    /**
     * @var int
     */
    protected $originationSize;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $blockSecurityDeposit;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $endorsementSecurityDeposit;
    /**
     * @var string[]
     */
    protected $bakingRewardPerEndorsement;
    /**
     * @var string[]
     */
    protected $endorsementReward;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $costPerByte;
    /**
     * Decimal representation of a big number.
     *
     * @var string
     */
    protected $hardStorageLimitPerOperation;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $testChainDuration;
    /**
     * @var int
     */
    protected $quorumMin;
    /**
     * @var int
     */
    protected $quorumMax;
    /**
     * @var int
     */
    protected $minProposalQuorum;
    /**
     * @var int
     */
    protected $initialEndorsers;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $delayPerMissingEndorsement;

    public function getProofOfWorkNonceSize(): int
    {
        return $this->proofOfWorkNonceSize;
    }

    public function setProofOfWorkNonceSize(int $proofOfWorkNonceSize): self
    {
        $this->proofOfWorkNonceSize = $proofOfWorkNonceSize;

        return $this;
    }

    public function getNonceLength(): int
    {
        return $this->nonceLength;
    }

    public function setNonceLength(int $nonceLength): self
    {
        $this->nonceLength = $nonceLength;

        return $this;
    }

    public function getMaxAnonOpsPerBlock(): int
    {
        return $this->maxAnonOpsPerBlock;
    }

    public function setMaxAnonOpsPerBlock(int $maxAnonOpsPerBlock): self
    {
        $this->maxAnonOpsPerBlock = $maxAnonOpsPerBlock;

        return $this;
    }

    public function getMaxOperationDataLength(): int
    {
        return $this->maxOperationDataLength;
    }

    public function setMaxOperationDataLength(int $maxOperationDataLength): self
    {
        $this->maxOperationDataLength = $maxOperationDataLength;

        return $this;
    }

    public function getMaxProposalsPerDelegate(): int
    {
        return $this->maxProposalsPerDelegate;
    }

    public function setMaxProposalsPerDelegate(int $maxProposalsPerDelegate): self
    {
        $this->maxProposalsPerDelegate = $maxProposalsPerDelegate;

        return $this;
    }

    public function getPreservedCycles(): int
    {
        return $this->preservedCycles;
    }

    public function setPreservedCycles(int $preservedCycles): self
    {
        $this->preservedCycles = $preservedCycles;

        return $this;
    }

    public function getBlocksPerCycle(): int
    {
        return $this->blocksPerCycle;
    }

    public function setBlocksPerCycle(int $blocksPerCycle): self
    {
        $this->blocksPerCycle = $blocksPerCycle;

        return $this;
    }

    public function getBlocksPerCommitment(): int
    {
        return $this->blocksPerCommitment;
    }

    public function setBlocksPerCommitment(int $blocksPerCommitment): self
    {
        $this->blocksPerCommitment = $blocksPerCommitment;

        return $this;
    }

    public function getBlocksPerRollSnapshot(): int
    {
        return $this->blocksPerRollSnapshot;
    }

    public function setBlocksPerRollSnapshot(int $blocksPerRollSnapshot): self
    {
        $this->blocksPerRollSnapshot = $blocksPerRollSnapshot;

        return $this;
    }

    public function getBlocksPerVotingPeriod(): int
    {
        return $this->blocksPerVotingPeriod;
    }

    public function setBlocksPerVotingPeriod(int $blocksPerVotingPeriod): self
    {
        $this->blocksPerVotingPeriod = $blocksPerVotingPeriod;

        return $this;
    }

    /**
     * @return string[]
     */
    public function getTimeBetweenBlocks(): array
    {
        return $this->timeBetweenBlocks;
    }

    /**
     * @param string[] $timeBetweenBlocks
     */
    public function setTimeBetweenBlocks(array $timeBetweenBlocks): self
    {
        $this->timeBetweenBlocks = $timeBetweenBlocks;

        return $this;
    }

    public function getEndorsersPerBlock(): int
    {
        return $this->endorsersPerBlock;
    }

    public function setEndorsersPerBlock(int $endorsersPerBlock): self
    {
        $this->endorsersPerBlock = $endorsersPerBlock;

        return $this;
    }

    /**
     * Decimal representation of a big number.
     */
    public function getHardGasLimitPerOperation(): string
    {
        return $this->hardGasLimitPerOperation;
    }

    /**
     * Decimal representation of a big number.
     */
    public function setHardGasLimitPerOperation(string $hardGasLimitPerOperation): self
    {
        $this->hardGasLimitPerOperation = $hardGasLimitPerOperation;

        return $this;
    }

    /**
     * Decimal representation of a big number.
     */
    public function getHardGasLimitPerBlock(): string
    {
        return $this->hardGasLimitPerBlock;
    }

    /**
     * Decimal representation of a big number.
     */
    public function setHardGasLimitPerBlock(string $hardGasLimitPerBlock): self
    {
        $this->hardGasLimitPerBlock = $hardGasLimitPerBlock;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getProofOfWorkThreshold(): string
    {
        return $this->proofOfWorkThreshold;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setProofOfWorkThreshold(string $proofOfWorkThreshold): self
    {
        $this->proofOfWorkThreshold = $proofOfWorkThreshold;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getTokensPerRoll(): string
    {
        return $this->tokensPerRoll;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setTokensPerRoll(string $tokensPerRoll): self
    {
        $this->tokensPerRoll = $tokensPerRoll;

        return $this;
    }

    public function getMichelsonMaximumTypeSize(): int
    {
        return $this->michelsonMaximumTypeSize;
    }

    public function setMichelsonMaximumTypeSize(int $michelsonMaximumTypeSize): self
    {
        $this->michelsonMaximumTypeSize = $michelsonMaximumTypeSize;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getSeedNonceRevelationTip(): string
    {
        return $this->seedNonceRevelationTip;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setSeedNonceRevelationTip(string $seedNonceRevelationTip): self
    {
        $this->seedNonceRevelationTip = $seedNonceRevelationTip;

        return $this;
    }

    public function getOriginationSize(): int
    {
        return $this->originationSize;
    }

    public function setOriginationSize(int $originationSize): self
    {
        $this->originationSize = $originationSize;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getBlockSecurityDeposit(): string
    {
        return $this->blockSecurityDeposit;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setBlockSecurityDeposit(string $blockSecurityDeposit): self
    {
        $this->blockSecurityDeposit = $blockSecurityDeposit;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getEndorsementSecurityDeposit(): string
    {
        return $this->endorsementSecurityDeposit;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setEndorsementSecurityDeposit(string $endorsementSecurityDeposit): self
    {
        $this->endorsementSecurityDeposit = $endorsementSecurityDeposit;

        return $this;
    }

    /**
     * @return string[]
     */
    public function getBakingRewardPerEndorsement(): array
    {
        return $this->bakingRewardPerEndorsement;
    }

    /**
     * @param string[] $bakingRewardPerEndorsement
     */
    public function setBakingRewardPerEndorsement(array $bakingRewardPerEndorsement): self
    {
        $this->bakingRewardPerEndorsement = $bakingRewardPerEndorsement;

        return $this;
    }

    /**
     * @return string[]
     */
    public function getEndorsementReward(): array
    {
        return $this->endorsementReward;
    }

    /**
     * @param string[] $endorsementReward
     */
    public function setEndorsementReward(array $endorsementReward): self
    {
        $this->endorsementReward = $endorsementReward;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getCostPerByte(): string
    {
        return $this->costPerByte;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setCostPerByte(string $costPerByte): self
    {
        $this->costPerByte = $costPerByte;

        return $this;
    }

    /**
     * Decimal representation of a big number.
     */
    public function getHardStorageLimitPerOperation(): string
    {
        return $this->hardStorageLimitPerOperation;
    }

    /**
     * Decimal representation of a big number.
     */
    public function setHardStorageLimitPerOperation(string $hardStorageLimitPerOperation): self
    {
        $this->hardStorageLimitPerOperation = $hardStorageLimitPerOperation;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getTestChainDuration(): string
    {
        return $this->testChainDuration;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setTestChainDuration(string $testChainDuration): self
    {
        $this->testChainDuration = $testChainDuration;

        return $this;
    }

    public function getQuorumMin(): int
    {
        return $this->quorumMin;
    }

    public function setQuorumMin(int $quorumMin): self
    {
        $this->quorumMin = $quorumMin;

        return $this;
    }

    public function getQuorumMax(): int
    {
        return $this->quorumMax;
    }

    public function setQuorumMax(int $quorumMax): self
    {
        $this->quorumMax = $quorumMax;

        return $this;
    }

    public function getMinProposalQuorum(): int
    {
        return $this->minProposalQuorum;
    }

    public function setMinProposalQuorum(int $minProposalQuorum): self
    {
        $this->minProposalQuorum = $minProposalQuorum;

        return $this;
    }

    public function getInitialEndorsers(): int
    {
        return $this->initialEndorsers;
    }

    public function setInitialEndorsers(int $initialEndorsers): self
    {
        $this->initialEndorsers = $initialEndorsers;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getDelayPerMissingEndorsement(): string
    {
        return $this->delayPerMissingEndorsement;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setDelayPerMissingEndorsement(string $delayPerMissingEndorsement): self
    {
        $this->delayPerMissingEndorsement = $delayPerMissingEndorsement;

        return $this;
    }
}
