<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Pezos\Generated\Proto\Model;

class ContextConstantsGetResponse200 extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var int
     */
    protected $proofOfWorkNonceSize;
    /**
     * @var int
     */
    protected $nonceLength;
    /**
     * @var int
     */
    protected $maxAnonOpsPerBlock;
    /**
     * @var int
     */
    protected $maxOperationDataLength;
    /**
     * @var int
     */
    protected $maxProposalsPerDelegate;
    /**
     * @var int
     */
    protected $maxMichelineNodeCount;
    /**
     * @var int
     */
    protected $maxMichelineBytesLimit;
    /**
     * @var int
     */
    protected $maxAllowedGlobalConstantsDepth;
    /**
     * @var int
     */
    protected $cacheLayoutSize;
    /**
     * @var int
     */
    protected $michelsonMaximumTypeSize;
    /**
     * @var int
     */
    protected $maxSlashingPeriod;
    /**
     * @var int
     */
    protected $smartRollupMaxWrappedProofBinarySize;
    /**
     * @var int
     */
    protected $smartRollupMessageSizeLimit;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $smartRollupMaxNumberOfMessagesPerLevel;
    /**
     * @var int
     */
    protected $consensusRightsDelay;
    /**
     * @var int
     */
    protected $blocksPreservationCycles;
    /**
     * @var int
     */
    protected $delegateParametersActivationDelay;
    /**
     * @var int
     */
    protected $blocksPerCycle;
    /**
     * @var int
     */
    protected $blocksPerCommitment;
    /**
     * @var int
     */
    protected $nonceRevelationThreshold;
    /**
     * @var int
     */
    protected $cyclesPerVotingPeriod;
    /**
     * Decimal representation of a big number.
     *
     * @var string
     */
    protected $hardGasLimitPerOperation;
    /**
     * Decimal representation of a big number.
     *
     * @var string
     */
    protected $hardGasLimitPerBlock;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $proofOfWorkThreshold;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $minimalStake;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $minimalFrozenStake;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $vdfDifficulty;
    /**
     * @var int
     */
    protected $originationSize;
    /**
     * @var ContextConstantsGetResponse200IssuanceWeights
     */
    protected $issuanceWeights;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $costPerByte;
    /**
     * Decimal representation of a big number.
     *
     * @var string
     */
    protected $hardStorageLimitPerOperation;
    /**
     * @var int
     */
    protected $quorumMin;
    /**
     * @var int
     */
    protected $quorumMax;
    /**
     * @var int
     */
    protected $minProposalQuorum;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $liquidityBakingSubsidy;
    /**
     * @var int
     */
    protected $liquidityBakingToggleEmaThreshold;
    /**
     * @var int
     */
    protected $maxOperationsTimeToLive;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $minimalBlockDelay;
    /**
     * Decimal representation of 64 bit integers.
     *
     * @var string
     */
    protected $delayIncrementPerRound;
    /**
     * @var int
     */
    protected $consensusCommitteeSize;
    /**
     * @var int
     */
    protected $consensusThreshold;
    /**
     * @var ContextConstantsGetResponse200MinimalParticipationRatio
     */
    protected $minimalParticipationRatio;
    /**
     * @var int
     */
    protected $limitOfDelegationOverBaking;
    /**
     * @var int
     */
    protected $percentageOfFrozenDepositsSlashedPerDoubleBaking;
    /**
     * @var int
     */
    protected $percentageOfFrozenDepositsSlashedPerDoubleAttestation;
    /**
     * @var int
     */
    protected $maxSlashingPerBlock;
    /**
     * @var int
     */
    protected $maxSlashingThreshold;
    protected $testnetDictator;
    protected $initialSeed;
    /**
     * @var int
     */
    protected $cacheScriptSize;
    /**
     * @var int
     */
    protected $cacheStakeDistributionCycles;
    /**
     * @var int
     */
    protected $cacheSamplerStateCycles;
    /**
     * @var ContextConstantsGetResponse200DalParametric
     */
    protected $dalParametric;
    /**
     * @var bool
     */
    protected $smartRollupArithPvmEnable;
    /**
     * @var int
     */
    protected $smartRollupOriginationSize;
    /**
     * @var int
     */
    protected $smartRollupChallengeWindowInBlocks;
    /**
     * Decimal representation of a positive big number.
     *
     * @var string
     */
    protected $smartRollupStakeAmount;
    /**
     * @var int
     */
    protected $smartRollupCommitmentPeriodInBlocks;
    /**
     * @var int
     */
    protected $smartRollupMaxLookaheadInBlocks;
    /**
     * @var int
     */
    protected $smartRollupMaxActiveOutboxLevels;
    /**
     * @var int
     */
    protected $smartRollupMaxOutboxMessagesPerLevel;
    /**
     * @var int
     */
    protected $smartRollupNumberOfSectionsInDissection;
    /**
     * @var int
     */
    protected $smartRollupTimeoutPeriodInBlocks;
    /**
     * @var int
     */
    protected $smartRollupMaxNumberOfCementedCommitments;
    /**
     * @var int
     */
    protected $smartRollupMaxNumberOfParallelGames;
    /**
     * @var ContextConstantsGetResponse200SmartRollupRevealActivationLevel
     */
    protected $smartRollupRevealActivationLevel;
    /**
     * @var bool
     */
    protected $smartRollupPrivateEnable;
    /**
     * @var bool
     */
    protected $smartRollupRiscvPvmEnable;
    /**
     * @var bool
     */
    protected $zkRollupEnable;
    /**
     * @var int
     */
    protected $zkRollupOriginationSize;
    /**
     * @var int
     */
    protected $zkRollupMinPendingToProcess;
    /**
     * @var int
     */
    protected $zkRollupMaxTicketPayloadSize;
    /**
     * @var int
     */
    protected $globalLimitOfStakingOverBaking;
    /**
     * @var int
     */
    protected $edgeOfStakingOverDelegation;
    /**
     * @var int
     */
    protected $adaptiveIssuanceLaunchEmaThreshold;
    /**
     * @var ContextConstantsGetResponse200AdaptiveRewardsParams
     */
    protected $adaptiveRewardsParams;
    /**
     * @var bool
     */
    protected $adaptiveIssuanceActivationVoteEnable;
    /**
     * @var bool
     */
    protected $autostakingEnable;
    /**
     * @var bool
     */
    protected $adaptiveIssuanceForceActivation;
    /**
     * @var bool
     */
    protected $nsEnable;
    /**
     * @var bool
     */
    protected $directTicketSpendingEnable;

    public function getProofOfWorkNonceSize(): int
    {
        return $this->proofOfWorkNonceSize;
    }

    public function setProofOfWorkNonceSize(int $proofOfWorkNonceSize): self
    {
        $this->initialized['proofOfWorkNonceSize'] = true;
        $this->proofOfWorkNonceSize = $proofOfWorkNonceSize;

        return $this;
    }

    public function getNonceLength(): int
    {
        return $this->nonceLength;
    }

    public function setNonceLength(int $nonceLength): self
    {
        $this->initialized['nonceLength'] = true;
        $this->nonceLength = $nonceLength;

        return $this;
    }

    public function getMaxAnonOpsPerBlock(): int
    {
        return $this->maxAnonOpsPerBlock;
    }

    public function setMaxAnonOpsPerBlock(int $maxAnonOpsPerBlock): self
    {
        $this->initialized['maxAnonOpsPerBlock'] = true;
        $this->maxAnonOpsPerBlock = $maxAnonOpsPerBlock;

        return $this;
    }

    public function getMaxOperationDataLength(): int
    {
        return $this->maxOperationDataLength;
    }

    public function setMaxOperationDataLength(int $maxOperationDataLength): self
    {
        $this->initialized['maxOperationDataLength'] = true;
        $this->maxOperationDataLength = $maxOperationDataLength;

        return $this;
    }

    public function getMaxProposalsPerDelegate(): int
    {
        return $this->maxProposalsPerDelegate;
    }

    public function setMaxProposalsPerDelegate(int $maxProposalsPerDelegate): self
    {
        $this->initialized['maxProposalsPerDelegate'] = true;
        $this->maxProposalsPerDelegate = $maxProposalsPerDelegate;

        return $this;
    }

    public function getMaxMichelineNodeCount(): int
    {
        return $this->maxMichelineNodeCount;
    }

    public function setMaxMichelineNodeCount(int $maxMichelineNodeCount): self
    {
        $this->initialized['maxMichelineNodeCount'] = true;
        $this->maxMichelineNodeCount = $maxMichelineNodeCount;

        return $this;
    }

    public function getMaxMichelineBytesLimit(): int
    {
        return $this->maxMichelineBytesLimit;
    }

    public function setMaxMichelineBytesLimit(int $maxMichelineBytesLimit): self
    {
        $this->initialized['maxMichelineBytesLimit'] = true;
        $this->maxMichelineBytesLimit = $maxMichelineBytesLimit;

        return $this;
    }

    public function getMaxAllowedGlobalConstantsDepth(): int
    {
        return $this->maxAllowedGlobalConstantsDepth;
    }

    public function setMaxAllowedGlobalConstantsDepth(int $maxAllowedGlobalConstantsDepth): self
    {
        $this->initialized['maxAllowedGlobalConstantsDepth'] = true;
        $this->maxAllowedGlobalConstantsDepth = $maxAllowedGlobalConstantsDepth;

        return $this;
    }

    public function getCacheLayoutSize(): int
    {
        return $this->cacheLayoutSize;
    }

    public function setCacheLayoutSize(int $cacheLayoutSize): self
    {
        $this->initialized['cacheLayoutSize'] = true;
        $this->cacheLayoutSize = $cacheLayoutSize;

        return $this;
    }

    public function getMichelsonMaximumTypeSize(): int
    {
        return $this->michelsonMaximumTypeSize;
    }

    public function setMichelsonMaximumTypeSize(int $michelsonMaximumTypeSize): self
    {
        $this->initialized['michelsonMaximumTypeSize'] = true;
        $this->michelsonMaximumTypeSize = $michelsonMaximumTypeSize;

        return $this;
    }

    public function getMaxSlashingPeriod(): int
    {
        return $this->maxSlashingPeriod;
    }

    public function setMaxSlashingPeriod(int $maxSlashingPeriod): self
    {
        $this->initialized['maxSlashingPeriod'] = true;
        $this->maxSlashingPeriod = $maxSlashingPeriod;

        return $this;
    }

    public function getSmartRollupMaxWrappedProofBinarySize(): int
    {
        return $this->smartRollupMaxWrappedProofBinarySize;
    }

    public function setSmartRollupMaxWrappedProofBinarySize(int $smartRollupMaxWrappedProofBinarySize): self
    {
        $this->initialized['smartRollupMaxWrappedProofBinarySize'] = true;
        $this->smartRollupMaxWrappedProofBinarySize = $smartRollupMaxWrappedProofBinarySize;

        return $this;
    }

    public function getSmartRollupMessageSizeLimit(): int
    {
        return $this->smartRollupMessageSizeLimit;
    }

    public function setSmartRollupMessageSizeLimit(int $smartRollupMessageSizeLimit): self
    {
        $this->initialized['smartRollupMessageSizeLimit'] = true;
        $this->smartRollupMessageSizeLimit = $smartRollupMessageSizeLimit;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getSmartRollupMaxNumberOfMessagesPerLevel(): string
    {
        return $this->smartRollupMaxNumberOfMessagesPerLevel;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setSmartRollupMaxNumberOfMessagesPerLevel(string $smartRollupMaxNumberOfMessagesPerLevel): self
    {
        $this->initialized['smartRollupMaxNumberOfMessagesPerLevel'] = true;
        $this->smartRollupMaxNumberOfMessagesPerLevel = $smartRollupMaxNumberOfMessagesPerLevel;

        return $this;
    }

    public function getConsensusRightsDelay(): int
    {
        return $this->consensusRightsDelay;
    }

    public function setConsensusRightsDelay(int $consensusRightsDelay): self
    {
        $this->initialized['consensusRightsDelay'] = true;
        $this->consensusRightsDelay = $consensusRightsDelay;

        return $this;
    }

    public function getBlocksPreservationCycles(): int
    {
        return $this->blocksPreservationCycles;
    }

    public function setBlocksPreservationCycles(int $blocksPreservationCycles): self
    {
        $this->initialized['blocksPreservationCycles'] = true;
        $this->blocksPreservationCycles = $blocksPreservationCycles;

        return $this;
    }

    public function getDelegateParametersActivationDelay(): int
    {
        return $this->delegateParametersActivationDelay;
    }

    public function setDelegateParametersActivationDelay(int $delegateParametersActivationDelay): self
    {
        $this->initialized['delegateParametersActivationDelay'] = true;
        $this->delegateParametersActivationDelay = $delegateParametersActivationDelay;

        return $this;
    }

    public function getBlocksPerCycle(): int
    {
        return $this->blocksPerCycle;
    }

    public function setBlocksPerCycle(int $blocksPerCycle): self
    {
        $this->initialized['blocksPerCycle'] = true;
        $this->blocksPerCycle = $blocksPerCycle;

        return $this;
    }

    public function getBlocksPerCommitment(): int
    {
        return $this->blocksPerCommitment;
    }

    public function setBlocksPerCommitment(int $blocksPerCommitment): self
    {
        $this->initialized['blocksPerCommitment'] = true;
        $this->blocksPerCommitment = $blocksPerCommitment;

        return $this;
    }

    public function getNonceRevelationThreshold(): int
    {
        return $this->nonceRevelationThreshold;
    }

    public function setNonceRevelationThreshold(int $nonceRevelationThreshold): self
    {
        $this->initialized['nonceRevelationThreshold'] = true;
        $this->nonceRevelationThreshold = $nonceRevelationThreshold;

        return $this;
    }

    public function getCyclesPerVotingPeriod(): int
    {
        return $this->cyclesPerVotingPeriod;
    }

    public function setCyclesPerVotingPeriod(int $cyclesPerVotingPeriod): self
    {
        $this->initialized['cyclesPerVotingPeriod'] = true;
        $this->cyclesPerVotingPeriod = $cyclesPerVotingPeriod;

        return $this;
    }

    /**
     * Decimal representation of a big number.
     */
    public function getHardGasLimitPerOperation(): string
    {
        return $this->hardGasLimitPerOperation;
    }

    /**
     * Decimal representation of a big number.
     */
    public function setHardGasLimitPerOperation(string $hardGasLimitPerOperation): self
    {
        $this->initialized['hardGasLimitPerOperation'] = true;
        $this->hardGasLimitPerOperation = $hardGasLimitPerOperation;

        return $this;
    }

    /**
     * Decimal representation of a big number.
     */
    public function getHardGasLimitPerBlock(): string
    {
        return $this->hardGasLimitPerBlock;
    }

    /**
     * Decimal representation of a big number.
     */
    public function setHardGasLimitPerBlock(string $hardGasLimitPerBlock): self
    {
        $this->initialized['hardGasLimitPerBlock'] = true;
        $this->hardGasLimitPerBlock = $hardGasLimitPerBlock;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getProofOfWorkThreshold(): string
    {
        return $this->proofOfWorkThreshold;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setProofOfWorkThreshold(string $proofOfWorkThreshold): self
    {
        $this->initialized['proofOfWorkThreshold'] = true;
        $this->proofOfWorkThreshold = $proofOfWorkThreshold;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getMinimalStake(): string
    {
        return $this->minimalStake;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setMinimalStake(string $minimalStake): self
    {
        $this->initialized['minimalStake'] = true;
        $this->minimalStake = $minimalStake;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getMinimalFrozenStake(): string
    {
        return $this->minimalFrozenStake;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setMinimalFrozenStake(string $minimalFrozenStake): self
    {
        $this->initialized['minimalFrozenStake'] = true;
        $this->minimalFrozenStake = $minimalFrozenStake;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getVdfDifficulty(): string
    {
        return $this->vdfDifficulty;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setVdfDifficulty(string $vdfDifficulty): self
    {
        $this->initialized['vdfDifficulty'] = true;
        $this->vdfDifficulty = $vdfDifficulty;

        return $this;
    }

    public function getOriginationSize(): int
    {
        return $this->originationSize;
    }

    public function setOriginationSize(int $originationSize): self
    {
        $this->initialized['originationSize'] = true;
        $this->originationSize = $originationSize;

        return $this;
    }

    public function getIssuanceWeights(): ContextConstantsGetResponse200IssuanceWeights
    {
        return $this->issuanceWeights;
    }

    public function setIssuanceWeights(ContextConstantsGetResponse200IssuanceWeights $issuanceWeights): self
    {
        $this->initialized['issuanceWeights'] = true;
        $this->issuanceWeights = $issuanceWeights;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getCostPerByte(): string
    {
        return $this->costPerByte;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setCostPerByte(string $costPerByte): self
    {
        $this->initialized['costPerByte'] = true;
        $this->costPerByte = $costPerByte;

        return $this;
    }

    /**
     * Decimal representation of a big number.
     */
    public function getHardStorageLimitPerOperation(): string
    {
        return $this->hardStorageLimitPerOperation;
    }

    /**
     * Decimal representation of a big number.
     */
    public function setHardStorageLimitPerOperation(string $hardStorageLimitPerOperation): self
    {
        $this->initialized['hardStorageLimitPerOperation'] = true;
        $this->hardStorageLimitPerOperation = $hardStorageLimitPerOperation;

        return $this;
    }

    public function getQuorumMin(): int
    {
        return $this->quorumMin;
    }

    public function setQuorumMin(int $quorumMin): self
    {
        $this->initialized['quorumMin'] = true;
        $this->quorumMin = $quorumMin;

        return $this;
    }

    public function getQuorumMax(): int
    {
        return $this->quorumMax;
    }

    public function setQuorumMax(int $quorumMax): self
    {
        $this->initialized['quorumMax'] = true;
        $this->quorumMax = $quorumMax;

        return $this;
    }

    public function getMinProposalQuorum(): int
    {
        return $this->minProposalQuorum;
    }

    public function setMinProposalQuorum(int $minProposalQuorum): self
    {
        $this->initialized['minProposalQuorum'] = true;
        $this->minProposalQuorum = $minProposalQuorum;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getLiquidityBakingSubsidy(): string
    {
        return $this->liquidityBakingSubsidy;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setLiquidityBakingSubsidy(string $liquidityBakingSubsidy): self
    {
        $this->initialized['liquidityBakingSubsidy'] = true;
        $this->liquidityBakingSubsidy = $liquidityBakingSubsidy;

        return $this;
    }

    public function getLiquidityBakingToggleEmaThreshold(): int
    {
        return $this->liquidityBakingToggleEmaThreshold;
    }

    public function setLiquidityBakingToggleEmaThreshold(int $liquidityBakingToggleEmaThreshold): self
    {
        $this->initialized['liquidityBakingToggleEmaThreshold'] = true;
        $this->liquidityBakingToggleEmaThreshold = $liquidityBakingToggleEmaThreshold;

        return $this;
    }

    public function getMaxOperationsTimeToLive(): int
    {
        return $this->maxOperationsTimeToLive;
    }

    public function setMaxOperationsTimeToLive(int $maxOperationsTimeToLive): self
    {
        $this->initialized['maxOperationsTimeToLive'] = true;
        $this->maxOperationsTimeToLive = $maxOperationsTimeToLive;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getMinimalBlockDelay(): string
    {
        return $this->minimalBlockDelay;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setMinimalBlockDelay(string $minimalBlockDelay): self
    {
        $this->initialized['minimalBlockDelay'] = true;
        $this->minimalBlockDelay = $minimalBlockDelay;

        return $this;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function getDelayIncrementPerRound(): string
    {
        return $this->delayIncrementPerRound;
    }

    /**
     * Decimal representation of 64 bit integers.
     */
    public function setDelayIncrementPerRound(string $delayIncrementPerRound): self
    {
        $this->initialized['delayIncrementPerRound'] = true;
        $this->delayIncrementPerRound = $delayIncrementPerRound;

        return $this;
    }

    public function getConsensusCommitteeSize(): int
    {
        return $this->consensusCommitteeSize;
    }

    public function setConsensusCommitteeSize(int $consensusCommitteeSize): self
    {
        $this->initialized['consensusCommitteeSize'] = true;
        $this->consensusCommitteeSize = $consensusCommitteeSize;

        return $this;
    }

    public function getConsensusThreshold(): int
    {
        return $this->consensusThreshold;
    }

    public function setConsensusThreshold(int $consensusThreshold): self
    {
        $this->initialized['consensusThreshold'] = true;
        $this->consensusThreshold = $consensusThreshold;

        return $this;
    }

    public function getMinimalParticipationRatio(): ContextConstantsGetResponse200MinimalParticipationRatio
    {
        return $this->minimalParticipationRatio;
    }

    public function setMinimalParticipationRatio(ContextConstantsGetResponse200MinimalParticipationRatio $minimalParticipationRatio): self
    {
        $this->initialized['minimalParticipationRatio'] = true;
        $this->minimalParticipationRatio = $minimalParticipationRatio;

        return $this;
    }

    public function getLimitOfDelegationOverBaking(): int
    {
        return $this->limitOfDelegationOverBaking;
    }

    public function setLimitOfDelegationOverBaking(int $limitOfDelegationOverBaking): self
    {
        $this->initialized['limitOfDelegationOverBaking'] = true;
        $this->limitOfDelegationOverBaking = $limitOfDelegationOverBaking;

        return $this;
    }

    public function getPercentageOfFrozenDepositsSlashedPerDoubleBaking(): int
    {
        return $this->percentageOfFrozenDepositsSlashedPerDoubleBaking;
    }

    public function setPercentageOfFrozenDepositsSlashedPerDoubleBaking(int $percentageOfFrozenDepositsSlashedPerDoubleBaking): self
    {
        $this->initialized['percentageOfFrozenDepositsSlashedPerDoubleBaking'] = true;
        $this->percentageOfFrozenDepositsSlashedPerDoubleBaking = $percentageOfFrozenDepositsSlashedPerDoubleBaking;

        return $this;
    }

    public function getPercentageOfFrozenDepositsSlashedPerDoubleAttestation(): int
    {
        return $this->percentageOfFrozenDepositsSlashedPerDoubleAttestation;
    }

    public function setPercentageOfFrozenDepositsSlashedPerDoubleAttestation(int $percentageOfFrozenDepositsSlashedPerDoubleAttestation): self
    {
        $this->initialized['percentageOfFrozenDepositsSlashedPerDoubleAttestation'] = true;
        $this->percentageOfFrozenDepositsSlashedPerDoubleAttestation = $percentageOfFrozenDepositsSlashedPerDoubleAttestation;

        return $this;
    }

    public function getMaxSlashingPerBlock(): int
    {
        return $this->maxSlashingPerBlock;
    }

    public function setMaxSlashingPerBlock(int $maxSlashingPerBlock): self
    {
        $this->initialized['maxSlashingPerBlock'] = true;
        $this->maxSlashingPerBlock = $maxSlashingPerBlock;

        return $this;
    }

    public function getMaxSlashingThreshold(): int
    {
        return $this->maxSlashingThreshold;
    }

    public function setMaxSlashingThreshold(int $maxSlashingThreshold): self
    {
        $this->initialized['maxSlashingThreshold'] = true;
        $this->maxSlashingThreshold = $maxSlashingThreshold;

        return $this;
    }

    public function getTestnetDictator()
    {
        return $this->testnetDictator;
    }

    public function setTestnetDictator($testnetDictator): self
    {
        $this->initialized['testnetDictator'] = true;
        $this->testnetDictator = $testnetDictator;

        return $this;
    }

    public function getInitialSeed()
    {
        return $this->initialSeed;
    }

    public function setInitialSeed($initialSeed): self
    {
        $this->initialized['initialSeed'] = true;
        $this->initialSeed = $initialSeed;

        return $this;
    }

    public function getCacheScriptSize(): int
    {
        return $this->cacheScriptSize;
    }

    public function setCacheScriptSize(int $cacheScriptSize): self
    {
        $this->initialized['cacheScriptSize'] = true;
        $this->cacheScriptSize = $cacheScriptSize;

        return $this;
    }

    public function getCacheStakeDistributionCycles(): int
    {
        return $this->cacheStakeDistributionCycles;
    }

    public function setCacheStakeDistributionCycles(int $cacheStakeDistributionCycles): self
    {
        $this->initialized['cacheStakeDistributionCycles'] = true;
        $this->cacheStakeDistributionCycles = $cacheStakeDistributionCycles;

        return $this;
    }

    public function getCacheSamplerStateCycles(): int
    {
        return $this->cacheSamplerStateCycles;
    }

    public function setCacheSamplerStateCycles(int $cacheSamplerStateCycles): self
    {
        $this->initialized['cacheSamplerStateCycles'] = true;
        $this->cacheSamplerStateCycles = $cacheSamplerStateCycles;

        return $this;
    }

    public function getDalParametric(): ContextConstantsGetResponse200DalParametric
    {
        return $this->dalParametric;
    }

    public function setDalParametric(ContextConstantsGetResponse200DalParametric $dalParametric): self
    {
        $this->initialized['dalParametric'] = true;
        $this->dalParametric = $dalParametric;

        return $this;
    }

    public function getSmartRollupArithPvmEnable(): bool
    {
        return $this->smartRollupArithPvmEnable;
    }

    public function setSmartRollupArithPvmEnable(bool $smartRollupArithPvmEnable): self
    {
        $this->initialized['smartRollupArithPvmEnable'] = true;
        $this->smartRollupArithPvmEnable = $smartRollupArithPvmEnable;

        return $this;
    }

    public function getSmartRollupOriginationSize(): int
    {
        return $this->smartRollupOriginationSize;
    }

    public function setSmartRollupOriginationSize(int $smartRollupOriginationSize): self
    {
        $this->initialized['smartRollupOriginationSize'] = true;
        $this->smartRollupOriginationSize = $smartRollupOriginationSize;

        return $this;
    }

    public function getSmartRollupChallengeWindowInBlocks(): int
    {
        return $this->smartRollupChallengeWindowInBlocks;
    }

    public function setSmartRollupChallengeWindowInBlocks(int $smartRollupChallengeWindowInBlocks): self
    {
        $this->initialized['smartRollupChallengeWindowInBlocks'] = true;
        $this->smartRollupChallengeWindowInBlocks = $smartRollupChallengeWindowInBlocks;

        return $this;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function getSmartRollupStakeAmount(): string
    {
        return $this->smartRollupStakeAmount;
    }

    /**
     * Decimal representation of a positive big number.
     */
    public function setSmartRollupStakeAmount(string $smartRollupStakeAmount): self
    {
        $this->initialized['smartRollupStakeAmount'] = true;
        $this->smartRollupStakeAmount = $smartRollupStakeAmount;

        return $this;
    }

    public function getSmartRollupCommitmentPeriodInBlocks(): int
    {
        return $this->smartRollupCommitmentPeriodInBlocks;
    }

    public function setSmartRollupCommitmentPeriodInBlocks(int $smartRollupCommitmentPeriodInBlocks): self
    {
        $this->initialized['smartRollupCommitmentPeriodInBlocks'] = true;
        $this->smartRollupCommitmentPeriodInBlocks = $smartRollupCommitmentPeriodInBlocks;

        return $this;
    }

    public function getSmartRollupMaxLookaheadInBlocks(): int
    {
        return $this->smartRollupMaxLookaheadInBlocks;
    }

    public function setSmartRollupMaxLookaheadInBlocks(int $smartRollupMaxLookaheadInBlocks): self
    {
        $this->initialized['smartRollupMaxLookaheadInBlocks'] = true;
        $this->smartRollupMaxLookaheadInBlocks = $smartRollupMaxLookaheadInBlocks;

        return $this;
    }

    public function getSmartRollupMaxActiveOutboxLevels(): int
    {
        return $this->smartRollupMaxActiveOutboxLevels;
    }

    public function setSmartRollupMaxActiveOutboxLevels(int $smartRollupMaxActiveOutboxLevels): self
    {
        $this->initialized['smartRollupMaxActiveOutboxLevels'] = true;
        $this->smartRollupMaxActiveOutboxLevels = $smartRollupMaxActiveOutboxLevels;

        return $this;
    }

    public function getSmartRollupMaxOutboxMessagesPerLevel(): int
    {
        return $this->smartRollupMaxOutboxMessagesPerLevel;
    }

    public function setSmartRollupMaxOutboxMessagesPerLevel(int $smartRollupMaxOutboxMessagesPerLevel): self
    {
        $this->initialized['smartRollupMaxOutboxMessagesPerLevel'] = true;
        $this->smartRollupMaxOutboxMessagesPerLevel = $smartRollupMaxOutboxMessagesPerLevel;

        return $this;
    }

    public function getSmartRollupNumberOfSectionsInDissection(): int
    {
        return $this->smartRollupNumberOfSectionsInDissection;
    }

    public function setSmartRollupNumberOfSectionsInDissection(int $smartRollupNumberOfSectionsInDissection): self
    {
        $this->initialized['smartRollupNumberOfSectionsInDissection'] = true;
        $this->smartRollupNumberOfSectionsInDissection = $smartRollupNumberOfSectionsInDissection;

        return $this;
    }

    public function getSmartRollupTimeoutPeriodInBlocks(): int
    {
        return $this->smartRollupTimeoutPeriodInBlocks;
    }

    public function setSmartRollupTimeoutPeriodInBlocks(int $smartRollupTimeoutPeriodInBlocks): self
    {
        $this->initialized['smartRollupTimeoutPeriodInBlocks'] = true;
        $this->smartRollupTimeoutPeriodInBlocks = $smartRollupTimeoutPeriodInBlocks;

        return $this;
    }

    public function getSmartRollupMaxNumberOfCementedCommitments(): int
    {
        return $this->smartRollupMaxNumberOfCementedCommitments;
    }

    public function setSmartRollupMaxNumberOfCementedCommitments(int $smartRollupMaxNumberOfCementedCommitments): self
    {
        $this->initialized['smartRollupMaxNumberOfCementedCommitments'] = true;
        $this->smartRollupMaxNumberOfCementedCommitments = $smartRollupMaxNumberOfCementedCommitments;

        return $this;
    }

    public function getSmartRollupMaxNumberOfParallelGames(): int
    {
        return $this->smartRollupMaxNumberOfParallelGames;
    }

    public function setSmartRollupMaxNumberOfParallelGames(int $smartRollupMaxNumberOfParallelGames): self
    {
        $this->initialized['smartRollupMaxNumberOfParallelGames'] = true;
        $this->smartRollupMaxNumberOfParallelGames = $smartRollupMaxNumberOfParallelGames;

        return $this;
    }

    public function getSmartRollupRevealActivationLevel(): ContextConstantsGetResponse200SmartRollupRevealActivationLevel
    {
        return $this->smartRollupRevealActivationLevel;
    }

    public function setSmartRollupRevealActivationLevel(ContextConstantsGetResponse200SmartRollupRevealActivationLevel $smartRollupRevealActivationLevel): self
    {
        $this->initialized['smartRollupRevealActivationLevel'] = true;
        $this->smartRollupRevealActivationLevel = $smartRollupRevealActivationLevel;

        return $this;
    }

    public function getSmartRollupPrivateEnable(): bool
    {
        return $this->smartRollupPrivateEnable;
    }

    public function setSmartRollupPrivateEnable(bool $smartRollupPrivateEnable): self
    {
        $this->initialized['smartRollupPrivateEnable'] = true;
        $this->smartRollupPrivateEnable = $smartRollupPrivateEnable;

        return $this;
    }

    public function getSmartRollupRiscvPvmEnable(): bool
    {
        return $this->smartRollupRiscvPvmEnable;
    }

    public function setSmartRollupRiscvPvmEnable(bool $smartRollupRiscvPvmEnable): self
    {
        $this->initialized['smartRollupRiscvPvmEnable'] = true;
        $this->smartRollupRiscvPvmEnable = $smartRollupRiscvPvmEnable;

        return $this;
    }

    public function getZkRollupEnable(): bool
    {
        return $this->zkRollupEnable;
    }

    public function setZkRollupEnable(bool $zkRollupEnable): self
    {
        $this->initialized['zkRollupEnable'] = true;
        $this->zkRollupEnable = $zkRollupEnable;

        return $this;
    }

    public function getZkRollupOriginationSize(): int
    {
        return $this->zkRollupOriginationSize;
    }

    public function setZkRollupOriginationSize(int $zkRollupOriginationSize): self
    {
        $this->initialized['zkRollupOriginationSize'] = true;
        $this->zkRollupOriginationSize = $zkRollupOriginationSize;

        return $this;
    }

    public function getZkRollupMinPendingToProcess(): int
    {
        return $this->zkRollupMinPendingToProcess;
    }

    public function setZkRollupMinPendingToProcess(int $zkRollupMinPendingToProcess): self
    {
        $this->initialized['zkRollupMinPendingToProcess'] = true;
        $this->zkRollupMinPendingToProcess = $zkRollupMinPendingToProcess;

        return $this;
    }

    public function getZkRollupMaxTicketPayloadSize(): int
    {
        return $this->zkRollupMaxTicketPayloadSize;
    }

    public function setZkRollupMaxTicketPayloadSize(int $zkRollupMaxTicketPayloadSize): self
    {
        $this->initialized['zkRollupMaxTicketPayloadSize'] = true;
        $this->zkRollupMaxTicketPayloadSize = $zkRollupMaxTicketPayloadSize;

        return $this;
    }

    public function getGlobalLimitOfStakingOverBaking(): int
    {
        return $this->globalLimitOfStakingOverBaking;
    }

    public function setGlobalLimitOfStakingOverBaking(int $globalLimitOfStakingOverBaking): self
    {
        $this->initialized['globalLimitOfStakingOverBaking'] = true;
        $this->globalLimitOfStakingOverBaking = $globalLimitOfStakingOverBaking;

        return $this;
    }

    public function getEdgeOfStakingOverDelegation(): int
    {
        return $this->edgeOfStakingOverDelegation;
    }

    public function setEdgeOfStakingOverDelegation(int $edgeOfStakingOverDelegation): self
    {
        $this->initialized['edgeOfStakingOverDelegation'] = true;
        $this->edgeOfStakingOverDelegation = $edgeOfStakingOverDelegation;

        return $this;
    }

    public function getAdaptiveIssuanceLaunchEmaThreshold(): int
    {
        return $this->adaptiveIssuanceLaunchEmaThreshold;
    }

    public function setAdaptiveIssuanceLaunchEmaThreshold(int $adaptiveIssuanceLaunchEmaThreshold): self
    {
        $this->initialized['adaptiveIssuanceLaunchEmaThreshold'] = true;
        $this->adaptiveIssuanceLaunchEmaThreshold = $adaptiveIssuanceLaunchEmaThreshold;

        return $this;
    }

    public function getAdaptiveRewardsParams(): ContextConstantsGetResponse200AdaptiveRewardsParams
    {
        return $this->adaptiveRewardsParams;
    }

    public function setAdaptiveRewardsParams(ContextConstantsGetResponse200AdaptiveRewardsParams $adaptiveRewardsParams): self
    {
        $this->initialized['adaptiveRewardsParams'] = true;
        $this->adaptiveRewardsParams = $adaptiveRewardsParams;

        return $this;
    }

    public function getAdaptiveIssuanceActivationVoteEnable(): bool
    {
        return $this->adaptiveIssuanceActivationVoteEnable;
    }

    public function setAdaptiveIssuanceActivationVoteEnable(bool $adaptiveIssuanceActivationVoteEnable): self
    {
        $this->initialized['adaptiveIssuanceActivationVoteEnable'] = true;
        $this->adaptiveIssuanceActivationVoteEnable = $adaptiveIssuanceActivationVoteEnable;

        return $this;
    }

    public function getAutostakingEnable(): bool
    {
        return $this->autostakingEnable;
    }

    public function setAutostakingEnable(bool $autostakingEnable): self
    {
        $this->initialized['autostakingEnable'] = true;
        $this->autostakingEnable = $autostakingEnable;

        return $this;
    }

    public function getAdaptiveIssuanceForceActivation(): bool
    {
        return $this->adaptiveIssuanceForceActivation;
    }

    public function setAdaptiveIssuanceForceActivation(bool $adaptiveIssuanceForceActivation): self
    {
        $this->initialized['adaptiveIssuanceForceActivation'] = true;
        $this->adaptiveIssuanceForceActivation = $adaptiveIssuanceForceActivation;

        return $this;
    }

    public function getNsEnable(): bool
    {
        return $this->nsEnable;
    }

    public function setNsEnable(bool $nsEnable): self
    {
        $this->initialized['nsEnable'] = true;
        $this->nsEnable = $nsEnable;

        return $this;
    }

    public function getDirectTicketSpendingEnable(): bool
    {
        return $this->directTicketSpendingEnable;
    }

    public function setDirectTicketSpendingEnable(bool $directTicketSpendingEnable): self
    {
        $this->initialized['directTicketSpendingEnable'] = true;
        $this->directTicketSpendingEnable = $directTicketSpendingEnable;

        return $this;
    }
}
