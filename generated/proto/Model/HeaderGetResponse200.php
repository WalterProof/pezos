<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Bzzhh\Pezos\Generated\Proto\Model;

class HeaderGetResponse200 extends \ArrayObject
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * @var string
     */
    protected $protocol;

    protected $chainId;

    protected $hash;
    /**
     * @var int
     */
    protected $level;
    /**
     * @var int
     */
    protected $proto;

    protected $predecessor;
    /**
     * A timestamp as seen by the protocol: second-level precision, epoch based.
     */
    protected $timestamp;
    /**
     * @var int
     */
    protected $validationPass;

    protected $operationsHash;
    /**
     * The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
     *
     * @var string[]
     */
    protected $fitness;

    protected $context;

    protected $content;

    protected $signature;

    public function getProtocol(): string
    {
        return $this->protocol;
    }

    public function setProtocol(string $protocol): self
    {
        $this->initialized['protocol'] = true;
        $this->protocol = $protocol;

        return $this;
    }

    public function getChainId()
    {
        return $this->chainId;
    }

    public function setChainId($chainId): self
    {
        $this->initialized['chainId'] = true;
        $this->chainId = $chainId;

        return $this;
    }

    public function getHash()
    {
        return $this->hash;
    }

    public function setHash($hash): self
    {
        $this->initialized['hash'] = true;
        $this->hash = $hash;

        return $this;
    }

    public function getLevel(): int
    {
        return $this->level;
    }

    public function setLevel(int $level): self
    {
        $this->initialized['level'] = true;
        $this->level = $level;

        return $this;
    }

    public function getProto(): int
    {
        return $this->proto;
    }

    public function setProto(int $proto): self
    {
        $this->initialized['proto'] = true;
        $this->proto = $proto;

        return $this;
    }

    public function getPredecessor()
    {
        return $this->predecessor;
    }

    public function setPredecessor($predecessor): self
    {
        $this->initialized['predecessor'] = true;
        $this->predecessor = $predecessor;

        return $this;
    }

    /**
     * A timestamp as seen by the protocol: second-level precision, epoch based.
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * A timestamp as seen by the protocol: second-level precision, epoch based.
     */
    public function setTimestamp($timestamp): self
    {
        $this->initialized['timestamp'] = true;
        $this->timestamp = $timestamp;

        return $this;
    }

    public function getValidationPass(): int
    {
        return $this->validationPass;
    }

    public function setValidationPass(int $validationPass): self
    {
        $this->initialized['validationPass'] = true;
        $this->validationPass = $validationPass;

        return $this;
    }

    public function getOperationsHash()
    {
        return $this->operationsHash;
    }

    public function setOperationsHash($operationsHash): self
    {
        $this->initialized['operationsHash'] = true;
        $this->operationsHash = $operationsHash;

        return $this;
    }

    /**
     * The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
     *
     * @return string[]
     */
    public function getFitness(): array
    {
        return $this->fitness;
    }

    /**
     * The fitness, or score, of a block, that allow the Tezos to decide which chain is the best. A fitness value is a list of byte sequences. They are compared as follows: shortest lists are smaller; lists of the same length are compared according to the lexicographical order.
     *
     * @param string[] $fitness
     */
    public function setFitness(array $fitness): self
    {
        $this->initialized['fitness'] = true;
        $this->fitness = $fitness;

        return $this;
    }

    public function getContext()
    {
        return $this->context;
    }

    public function setContext($context): self
    {
        $this->initialized['context'] = true;
        $this->context = $context;

        return $this;
    }

    public function getContent()
    {
        return $this->content;
    }

    public function setContent($content): self
    {
        $this->initialized['content'] = true;
        $this->content = $content;

        return $this;
    }

    public function getSignature()
    {
        return $this->signature;
    }

    public function setSignature($signature): self
    {
        $this->initialized['signature'] = true;
        $this->signature = $signature;

        return $this;
    }
}
